/*!
 * cacherrr - version 0.1.0
 *
 * Made with ❤ by Steve Ottoz so@dev.so
 *
 * Copyright (c) 2017 Steve Ottoz
 */
'use strict';export default class Cacherrr{constructor(a=0,b=[]){this.expire=a,this.exclude=b,this.entries={}}get(a){return new Promise((b,c)=>{const d=this.entries[a];let e;-1<this.exclude.indexOf(a)?e=new Error(`${a} is excluded from caching`):d?d.timestamp+this.expire<+new Date&&(e=new Error(`cache for ${a} is expired`)):e=new Error(`${a} is not cached yet`),e?(delete this.entries[a],c(e)):b(d.data)})}set(a,b){return new Promise((c,d)=>{0>this.exclude.indexOf(a)?(this.entries[a]={timestamp:+new Date,data:b},c(b)):d(new Error(`${a} is not cached yet`))})}clear(a){return delete this.entries[a],Promise.resolve()}clearAll(){return this.entries=[],Promise.resolve()}}