/*!
 * cacherrr - version 0.2.0
 *
 * Made with ❤ by Steve Ottoz so@dev.so
 *
 * Copyright (c) 2017 Steve Ottoz
 */
'use strict';export default class Cacherrr{constructor(a=0,b=[]){this.expire=a,this.exclude=b,this.entries={}}get(a){return new Promise((b,c)=>{const d=this.entries[a];let e;a===void 0?e=new Error('no path provided'):-1<this.exclude.indexOf(a)?e=new Error(`${a} is excluded from caching`):d?d.expires<+new Date&&(e=new Error(`cache for ${a} is expired`)):e=new Error(`${a} is not cached yet`),e?(delete this.entries[a],c(e)):b(d.data)})}set(a,b,c=this.expire){return new Promise((d,e)=>{const f=+new Date;let g;a===void 0?g=new Error('no path provided'):b?-1<this.exclude.indexOf(a)&&(g=new Error(`${a} is excluded from caching`)):g=new Error('no data provided'),g?e(g):(this.entries[a]={timestamp:f,expires:f+c,data:b},d(b))})}clear(a){return delete this.entries[a],Promise.resolve()}clearAll(){return this.entries=[],Promise.resolve()}}